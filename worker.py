import os
import json
from kafka import KafkaConsumer
from dotenv import load_dotenv
from typing import Dict
import sys
from providers.aws.Aws import Aws
from db.aws_resource import upsert_aws_resource

# Load environment variables from .env file
load_dotenv()

KAFKA_BROKER = os.environ.get("KAFKA_BROKER")
KAFKA_TOPIC = os.environ.get("KAFKA_TOPIC")


def process_task(task_data: Dict):
    # Add your task processing logic here
    print("Processing task:", task_data)


def main():
    consumer = KafkaConsumer(
        KAFKA_TOPIC,
        bootstrap_servers=[KAFKA_BROKER],
        value_deserializer=lambda v: json.loads(v.decode('utf-8')),
        auto_offset_reset='earliest',
        group_id="gen_code_group",
        enable_auto_commit=False
    )

    script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))

    for message in consumer:
        task = message.value
        provider_name = task['provider']
        organization_id = task['organizationId']
        task_data = task['taskData']

        if provider_name == 'aws':
            try:
                id_token = task['idToken']
                role_arn = task['roleArn']
                session_duration = task['sessionDuration']
                aws_region = task['awsRegion']
                provider = Aws(script_dir)
                provider.set_boto3_session(
                    id_token, role_arn, session_duration, aws_region)
                account_id = provider.session.client(
                    'sts').get_caller_identity()['Account']

                # process_task(task_data)
                provider.vpc()
                for module, module_v in provider.resource_list.items():
                    for resource_type, resource_type_v in module_v.items():
                        for resource_name, resource_name_v in resource_type_v.items():
                            upsert_aws_resource(
                                organization_id=organization_id,
                                provider=provider_name,
                                account_id=account_id,
                                region=aws_region,
                                role=role_arn,
                                resource_type=resource_type,
                                resource_name=resource_name,
                                resource_id=resource_name_v["id"],
                                state_file="s3://my-bucket/state.tf",
                                scanned_state_file="s3://my-bucket/scanned_state.tf",
                                status="active",
                                autogenerated=True,
                                description=""
                            )
                print("Task processed and committed")
            except Exception as e:
                print("Error processing task:", e)
        else:
            print("Provider not supported")

        consumer.commit()


if __name__ == "__main__":
    main()
