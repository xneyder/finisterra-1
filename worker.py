import os
import json
from kafka import KafkaConsumer
from dotenv import load_dotenv
from typing import Dict
import sys
from providers.aws.Aws import Aws
from db.resource import upsert_resource
from db.scan import get_scan_by_id

# Load environment variables from .env file
load_dotenv()

KAFKA_BROKER = os.environ.get("KAFKA_BROKER")
KAFKA_TOPIC = os.environ.get("KAFKA_TOPIC")


def process_task(task_data: Dict):
    # Add your task processing logic here
    print("Processing task:", task_data)


def main():
    consumer = KafkaConsumer(
        KAFKA_TOPIC,
        bootstrap_servers=[KAFKA_BROKER],
        value_deserializer=lambda v: json.loads(v.decode('utf-8')),
        auto_offset_reset='earliest',
        group_id="gen_code_group",
        enable_auto_commit=False
    )

    script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))

    for message in consumer:
        task = message.value
        provider_name = task['provider_name']

        if provider_name == 'aws':
            try:
                id_token = task['idToken']
                scan_id = task['scanId']

                # Get the scan with the given ID
                scan = get_scan_by_id(scan_id)
                if scan is None:
                    print(f"No scan found with ID {scan_id}")
                    continue

                # Extract the values you need
                organization_id = scan.organization.id
                role_arn = scan.workspace.awsAccount.roleArn
                aws_account_id = scan.workspace.awsAccount.id
                session_duration = scan.workspace.awsAccount.sessionDuration
                aws_region = scan.workspace.awsRegion
                workspace_id = scan.workspace.id
                provider_group_code = scan.workspace.providerGroup.code

                provider = Aws(script_dir)
                provider.set_boto3_session(
                    id_token, role_arn, session_duration, aws_region)

                if provider_group_code == 'vpc':
                    provider.vpc()
                    print("Processing VPC")
                for module, module_v in provider.resource_list.items():
                    for resource_type, resource_type_v in module_v.items():
                        for resource_name, resource_name_v in resource_type_v.items():
                            upsert_resource(
                                organization_id=organization_id,
                                workspace_id=workspace_id,
                                provider=provider_name,
                                aws_account_id=aws_account_id,
                                region=aws_region,
                                resource_type=resource_type,
                                resource_name=resource_name,
                                resource_id=resource_name_v["id"],
                                state_file="s3://my-bucket/state.tf",
                                scanned_state_file="s3://my-bucket/scanned_state.tf",
                                status="active",
                                autogenerated=True,
                                description=""
                            )

                print("Task processed and committed")
            except Exception as e:
                print("Error processing task:", e)
        else:
            print("Provider not supported")

        consumer.commit()


if __name__ == "__main__":
    main()
