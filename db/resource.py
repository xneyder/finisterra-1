# insert_resource.py
import os
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.dialects.postgresql import insert
from db.models import Resource, Base

# Load environment variables from .env file
load_dotenv()

# Get DATABASE_URL from environment variable
DATABASE_URL = os.environ["DATABASE_URL"]

engine = create_engine(DATABASE_URL)
Base.metadata.bind = engine

Session = sessionmaker(bind=engine)


def upsert_resource(organization_id, workspace_id, provider, aws_account_id, region,
                    resource_type, resource_name, resource_id, state_file,
                    scanned_state_file, status, autogenerated, description=None):
    session = Session()
    current_time = datetime.utcnow()

    # Prepare the upsert statement
    stmt = insert(Resource).values(
        organizationId=organization_id,
        workspaceId=workspace_id,
        provider=provider,
        awsAccountId=aws_account_id,
        region=region,
        resourceType=resource_type,
        resourceName=resource_name,
        resourceId=resource_id,
        stateFile=state_file,
        scannedStateFile=scanned_state_file,
        status=status,
        autogenerated=autogenerated,
        description=description,
        updatedAt=current_time

    ).on_conflict_do_update(
        index_elements=['awsAccountId', 'resourceType', 'resourceId'],
        set_=dict(
            organizationId=organization_id,
            workspaceId=workspace_id,
            provider=provider,
            awsAccountId=aws_account_id,
            region=region,
            resourceType=resource_type,
            resourceName=resource_name,
            resourceId=resource_id,
            stateFile=state_file,
            scannedStateFile=scanned_state_file,
            status=status,
            autogenerated=autogenerated,
            description=description,
            updatedAt=current_time
        )
    )

    # Execute the upsert statement
    session.execute(stmt)

    # Commit the transaction
    session.commit()

    # Close the session
    session.close()
