name: Test Modules
permissions:
  id-token: write
  contents: write
  checks: write
  security-events: write
  actions: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: "AWS Region"
        required: true
        default: "us-east-1"
      AWS_ACCESS_KEY_ID:
        required: true
        type: string
      AWS_SECRET_ACCESS_KEY:
        required: true
        type: string
      AWS_SESSION_TOKEN:
        required: false
        type: string

env:
  AWS_REGION: ${{ inputs.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ inputs.AWS_SESSION_TOKEN }}
  TERRAFORM_VERSION: "1.5.0"
  TERRAGRUNT_VERSION: "0.50.4"
  TF_PLAN: "False"

concurrency:
  group: ${{ github.workflow }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get services
        id: get-services
        run: |
          #result='["vpc"]'
          result='["vpc","acm","apigateway","autoscaling","cloudmap","cloudfront","logs","docdb","dynamodb","ec2","ecr","ecs","eks","elbv2","elasticache_redis","elasticbeanstalk","iam","kms","aws_lambda","rds","s3","sns","sqs","wafv2","stepfunction","msk","aurora","security_group","vpc_endpoint","elasticsearch"]'
          services=$(echo "$result" | jq -c '.')
          echo "services=$services" >> $GITHUB_OUTPUT

    outputs:
      services: ${{ steps.get-services.outputs.services }}

  generate_tf_code:
    needs: [setup]
    if: needs.setup.outputs.services != '[]'
    name: ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{fromJson(needs.setup.outputs.services)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terragrunt Binary Installer Action
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
          token: ${{ github.token }}

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Generate TF files for ${{ matrix.service }}
        id: generate_tf_code
        run: |
          # get the aws_account id using sts and put in a variiable called aws_account_id
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # run the python script main.py aws_account_id aws_region service_name but need to install the python requirements.txt first
          pip install -r requirements.txt
          python main.py $AWS_ACCOUNT_ID ${{ env.AWS_REGION }} ${{ matrix.service }}

          #check if generated/${{ matrix.service }} folder exists and if put true or false in files_generated github output
          if [ -d "generated/${{ matrix.service }}" ]; then
              echo "files_generated=true" >> $GITHUB_OUTPUT
          else
              echo "files_generated=false" >> $GITHUB_OUTPUT
          fi

      - name: Plan Terraform ${{ matrix.service }}
        if: steps.generate_tf_code.outputs.files_generated == 'true'
        uses: finisterra-io/terragrunt-action@main
        with:
          github-token: ${{ github.token }}
          terraform-version: ${{ env.TERRAFORM_VERSION }}
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}
          use-aws-auth: false
          enable-terraform-change-pr-commenter: true
          terragrunt-working-directory: "generated/${{ matrix.service }}"
          include-plan-job-summary: true
          terragrunt-command: |
            if [[ ! -f "terragrunt.hcl" ]]; then
              echo "No resources found for ${AWS_MODULE}"
              exit 0
            fi
            terragrunt plan --terragrunt-non-interactive -out=terraform.tfplan -lock-timeout=10m
