aws_elastic_beanstalk_application:
  # terraform_module: "../../../terraform-aws-modules/terraform-aws-elastic-beanstalk-application"
  terraform_module: "github.com/finisterra-io/terraform-aws-elastic-beanstalk-application.git?ref=main"
  terraform_module_version: "0.20.0"
  target_resource_name: default
  path: "beanstalk"
  defaults:
    enabled: true
  fields:
    name:
      field: name
      type: string
    description:
      field: description
      type: string
    tags:
      field: tags
      type: map
    appversion_lifecycle_service_role_arn:
      function: get_field_from_attrs
      arg: appversion_lifecycle.service_role_arn
      type: string
    appversion_lifecycle_max_count:
      function: get_field_from_attrs
      arg: appversion_lifecycle.max_count
      type: number
    appversion_lifecycle_delete_source_from_s3:
      function: get_field_from_attrs
      arg: appversion_lifecycle.delete_source_from_s3
      type: bool

aws_elastic_beanstalk_environment:
  # terraform_module: "../../../terraform-aws-modules/terraform-aws-elastic-beanstalk-environment"
  terraform_module: "github.com/finisterra-io/terraform-aws-elastic-beanstalk-environment.git?ref=main"
  terraform_module_version: "0.20.0"
  target_resource_name: default
  path: "beanstalk"
  dependencies:
    - "../iam_role"
    - "../security_group"
  defaults:
    enabled: true
    # create_service_role: false
    # create_ec2_role: false
    # create_instance_profile: false
    # create_security_group: false
  fields:
    name:
      field: name
      type: string
    elastic_beanstalk_application_name:
      field: application
      type: string
    description:
      field: description
      type: string
    tier:
      field: tier
      type: string
    solution_stack_name:
      field: solution_stack_name
      type: string
    wait_for_ready_timeout:
      field: wait_for_ready_timeout
      type: number
    version_label:
      field: version_label
      type: string
    tags:
      field: tags
      type: map
    settings:
      field: setting
      type: list
  # childs:
  #   aws_iam_role:
  #     join:
  #       name:
  #         join_function: join_service_iam_role
  #     target_resource_name: service
  #     fields:
  #       create_service_role:
  #         unique: true
  #       service_iam_role_name:
  #         field: name
  #         type: string
  #       service_iam_role_assume_role_policy:
  #         field: assume_role_policy
  #         type: string
  #         multiline: true
  #       service_iam_role_description:
  #         field: description
  #         type: string
  #       service_iam_role_tags:
  #         field: tags
  #         type: map
  #     childs:
  #       aws_iam_role_policy_attachment:
  #         join:
  #           name:
  #             field: role
  #         target_resource_name: service
  #         second_index:
  #           field: policy_arn
  #         fields:
  #           create_service_role:
  #             unique: true
  #           service_iam_policy_arns:
  #             function: to_list
  #             arg: policy_arn
  #             type: list
  #   aws_iam_instance_profile:
  #     join:
  #       name:
  #         join_function: join_ec2_instance_profile
  #     target_resource_name: ec2
  #     fields:
  #       create_instance_profile:
  #         unique: true
  #       instance_profile_name:
  #         field: name
  #         type: string
  #       instance_profile_tags:
  #         field: tags
  #         type: map

  # aws_iam_role_ec2:
  #   resource_type: aws_iam_role
  #   join:
  #     name:
  #       join_function: join_ec2_iam_role
  #   target_resource_name: ec2
  #   fields:
  #     create_ec2_role:
  #       unique: true
  #     ec2_iam_role_name:
  #       field: name
  #       type: string
  #     ec2_iam_role_assume_role_policy:
  #       field: assume_role_policy
  #       type: string
  #       multiline: true
  #     ec2_iam_role_description:
  #       field: description
  #       type: string
  #     ec2_iam_role_tags:
  #       field: tags
  #       type: map
  #   childs:
  #     aws_iam_role_policy_attachment:
  #       join:
  #         name:
  #           field: role
  #       target_resource_name: ec2
  #       second_index:
  #         field: policy_arn
  #       fields:
  #         create_ec2_role:
  #           unique: true
  #         ec2_iam_policy_arns:
  #           function: to_list
  #           arg: policy_arn
  #           type: list
  # aws_security_group:
  #   join:
  #     id:
  #       join_function: join_sg
  #   target_resource_name: default
  #   fields:
  #     create_security_group:
  #       unique: true
  #     security_group_name:
  #       field: name
  #       type: string
  #     vpc_id:
  #       field: vpc_id
  #       type: string
  #     security_group_description:
  #       field: description
  #       type: string
  #     security_group_tags:
  #       field: tags
  #       type: map
  #   childs:
  #     aws_security_group_rule:
  #       join:
  #         id:
  #           field: security_group_id
  #       create_security_group:
  #         unique: true
  #       target_resource_name: default
  #       second_index:
  #         field: id
  #       fields:
  #         security_group_rules:
  #           function: build_dict_var
  #           arg: id
  #           type: list

aws_iam_role:
  # terraform_module: "../../../terraform-aws-modules/terraform-aws-iam//modules/iam_role"
  terraform_module: "github.com/finisterra-io/terraform-aws-iam//modules/iam_role?ref=main"
  terraform_module_version: "5.2.0"
  target_resource_name: default
  name_field: role_name
  path: "iam_role"
  dependencies:
    - "../iam_policy"
  fields:
    role_name:
      field: name
      type: string
    assume_role_policy:
      field: assume_role_policy
      type: string
      multiline: true
    role_description:
      field: description
      type: string
    max_session_duration:
      field: max_session_duration
      type: number
    inline_policies:
      function: get_inline_policies
      type: list
    permissions_boundary:
      field: permissions_boundary
      type: string
    path:
      field: path
      type: string
    tags:
      field: tags
      type: map
    managed_policy_arns:
      field: managed_policy_arns
      type: list
  childs:
    aws_iam_role_policy_attachment:
      join:
        name:
          field: role
      target_resource_name: managed
      second_index:
        function: get_policy_attachment_index
    aws_iam_instance_profile:
      join:
        name:
          field: role
      target_resource_name: default
      second_index:
        field: name
      fields:
        instance_profiles:
          function: get_instance_profiles
          type: list

aws_iam_policy:
  # terraform_module: "../../../terraform-aws-modules/terraform-aws-iam//modules/iam_policy"
  terraform_module: "github.com/finisterra-io/terraform-aws-iam//modules/iam_policy?ref=main"
  terraform_module_version: "5.2.0"
  target_resource_name: default
  name_field: policy_name
  path: "iam_policy"
  fields:
    policy_documents:
      function: get_policy_documents
      type: string
      multiline: true
    policy_name:
      field: name
      type: string
    policy_description:
      field: description
      type: string
    path:
      field: path
      type: string
    tags:
      field: tags
      type: map

aws_security_group:
  # terraform_module: "../../../terraform-aws-modules/terraform-aws-security-group"
  terraform_module: "github.com/finisterra-io/terraform-aws-security-group?ref=main"
  terraform_module_version: "5.2.0"
  target_resource_name: default
  name_field: security_group_name
  add_id_hash_to_name: true
  path: "security_group"
  defaults:
    create_before_destroy: false
  fields:
    security_group_name:
      field: name
      type: string
    vpc_name:
      function: get_vpc_name
      arg: vpc_id
      type: string
    vpc_id:
      function: get_vpc_id
      type: string
      arg: vpc_id
    security_group_description:
      field: description
      type: string
    tags:
      field: tags
      type: map
  childs:
    aws_vpc_security_group_ingress_rule:
      join:
        id:
          field: security_group_id
      import_id:
        field: security_group_rule_id
      target_resource_name: dbc
      second_index:
        field: id
      fields:
        ingress_rules:
          function: get_security_group_rules
          type: map
    aws_vpc_security_group_egress_rule:
      join:
        id:
          field: security_group_id
      import_id:
        field: security_group_rule_id
      target_resource_name: dbc
      second_index:
        field: id
      fields:
        egress_rules:
          function: get_security_group_rules
          type: map
